<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Canvas xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:mate="http://mate.asfusion.com/"
		   xmlns:local="*"
		   xmlns:fimage="org.bigbluebutton.common.model.*"
		   width="{slideModel.viewportW}"
		   height="{slideModel.viewportH}"
		   x="{slideModel.viewportX}"
		   y="{slideModel.viewportY}"
		   creationComplete="onCreationComplete()"
		   verticalScrollPolicy="off"
		   horizontalScrollPolicy="off"
		   clipContent="true"
		   styleName="presentationSlideViewStyle"
		   xmlns:views="org.bigbluebutton.modules.present.views.*">

	<fx:Declarations>
	  <mate:Listener type="{PageChangedEvent.PRESENTATION_PAGE_CHANGED_EVENT}" method="handlePageChangedEvent" />
	  <mate:Listener type="{PageLoadedEvent.PAGE_LOADED_EVENT}" method="handlePageLoadedEvent" />
	  <mate:Listener type="{ShortcutEvent.FOCUS_SLIDE}" method="focusSlide" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.modules.present.commands.GoToPageLocalCommand;
			import org.bigbluebutton.modules.present.events.DisplaySlideEvent;
			import org.bigbluebutton.modules.present.events.PageChangedEvent;
			import org.bigbluebutton.modules.present.events.PageLoadedEvent;
			import org.bigbluebutton.modules.present.model.Page;
			import org.bigbluebutton.modules.present.model.PagePositionBroadcaster;
			import org.bigbluebutton.modules.present.model.Presentation;
			import org.bigbluebutton.modules.present.model.PresentationPodManager;
			import org.bigbluebutton.modules.present.ui.views.models.SlideCalcUtil;
			import org.bigbluebutton.modules.present.ui.views.models.SlideViewModel;
			import org.bigbluebutton.modules.whiteboard.views.IWhiteboardOverlay;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(SlideView);      
      
			[Bindable] public var zoomPercentage:Number = 100;
			public static const ZOOM_STEP:int = 5;
			public static const THUMBNAILS_CLOSED:String = "ThumbnailsClosed";
			
			private var whiteboardOverlay:IWhiteboardOverlay;
										
			private var dispatcher:Dispatcher = new Dispatcher();
						
			[Bindable]
			public var slideModel:SlideViewModel = new SlideViewModel();


			public var podId:String;
			public var currentPresenterInPod: String;

      		private var pageCache:ArrayCollection = new ArrayCollection();
			
			private var pagePositionBroadcaster:PagePositionBroadcaster;
      
			private function onCreationComplete():void {
				//slideLoader.width = this.width;
				//slideLoader.height = this.height;
				
				this.setChildIndex(thumbnailView, this.numChildren - 1);
				
				/*
				var t:Timer = new Timer(3000, 1);
				var that:SlideView = this;
				t.addEventListener(TimerEvent.TIMER_COMPLETE, function () {
					var poll:PollResultsView = new PollResultsView();
					that.addChild(poll);
					
					that.callLater(function():void {
						poll.x = that.width - poll.width;
						poll.y = that.height - poll.height;
					});
				});
				t.start();
				*/

        		pagePositionBroadcaster = new PagePositionBroadcaster(podId);
        
				if (amITheCurrentPodPresenter()) {
					becomePresenter(amITheCurrentPodPresenter(), this.currentPresenterInPod);
				} else {
					becomeViewer(amITheCurrentPodPresenter(), this.currentPresenterInPod);
				}
			}

			public function setSlides(_podId: String):void {
				if (_podId != this.podId) {
					return;
				}

				var pres: Presentation = PresentationPodManager.getInstance().getPod(_podId).getCurrentPresentation();
				if (pres != null) {
					pageCache = pres.getPages();
					/* Create the SortField object for the "num" field in the ArrayCollection object, and make sure we do a numeric sort. */
					var dataSortField:SortField = new SortField();
					dataSortField.name = "num";
					dataSortField.numeric = true;

					/* Create the Sort object and add the SortField object created earlier to the array of fields to sort on. */
					var numericDataSort:Sort = new Sort();
					numericDataSort.fields = [dataSortField];

					/* Set the ArrayCollection object's sort property to our custom sort, and refresh the ArrayCollection. */
					pageCache.sort = numericDataSort;
					pageCache.refresh();
					thumbnailView.dataProvider = pageCache;
				}
			}

      public function setSelectedSlide(slideNum:int):void {
        if (slideNum > pageCache.length) {
          LOGGER.debug("Page num [{0}] > numPages[{1}]", [slideNum, pageCache.length]);
          return;
        }
        for (var idx:int = 0; idx < pageCache.length; idx++) {
          var p:Page = pageCache.getItemAt(idx) as Page;
          if (p.num == slideNum) {
            thumbnailView.selectedIndex = idx;
          }
        }       
      }
            
			private function changeSlide():void {
				var data:Page = thumbnailView.selectedItem as Page;
				LOGGER.debug("Change page from thumbnail. Selected page [{0}]", [data.id]);

				dispatchEvent(new GoToPageLocalCommand(data.id));
				thumbnailView.visible = false;
			}
			
			private var prevMouseX:Number;
			private	var prevMouseY:Number;
			
			/**
			 * Triggered when the presenter clicks on the slides with the intent of moving it.
			 */		
			private function onMouseDown(e:MouseEvent):void {
				prevMouseX = this.mouseX;
				prevMouseY = this.mouseY;
				stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				stage.addEventListener(MouseEvent.MOUSE_UP, endDrag);
				Mouse.cursor = MouseCursor.HAND;
			}
			
			/**
			 * Triggered when the mouse had been clicked and dragged to move the slide.
			 */ 
			private function onMouseMove(e:MouseEvent):void {	
				// Compute the change in mouse position from where the mouse was clicked.
				var deltaCanvasMouseX:Number = this.mouseX - prevMouseX;
				var deltaCanvasMouseY:Number = this.mouseY - prevMouseY;
				prevMouseX = this.mouseX;
				prevMouseY = this.mouseY;				
				var xyChange:Boolean = slideModel.onMove(deltaCanvasMouseX, deltaCanvasMouseY);
				if (xyChange) {
					slideModel.printViewedRegion();
					slideModel.displayPresenterView();
					fitSlideToLoader();
					notifyOthersOfZoomEvent();
				}
			}
						
			/**
			 * Triggered when the presenter releases the mouse button or mouses out of the application
			 */		
			private function endDrag(e:MouseEvent = null):void {
				Mouse.cursor = MouseCursor.AUTO;
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				stage.removeEventListener(MouseEvent.MOUSE_UP, endDrag);
			}
						
			public function onParentResized(_podId: String, parentWidth:Number, parentHeight:Number):void {
				if (slideModel == null || noSlideContentLoaded()) return;

				if (_podId != this.podId) {
					return;
				}

				slideModel.parentChange(parentWidth, parentHeight);
				
				if (amITheCurrentPodPresenter()) {
					slideModel.adjustSlideAfterParentResized();
					slideModel.onMove(0, 0); // fake a move to reset some values
					slideModel.displayPresenterView();
					slideModel.printViewedRegion();
					fitSlideToLoader();
					notifyOthersOfZoomEvent();
				} else {
					var page:Page = PresentationPodManager.getInstance().getPod(_podId).getCurrentPage();
					if (page != null) {
						LOGGER.debug("Parent window has resized. Reposition page [{0}]", [page.id]);
						positionPage(page);
					}
				}
			}

			/**
			 * Fit the slide inside the loader.
			 */			
			private function fitSlideToLoader():void {
				if (noSlideContentLoaded()) return;
				slideLoader.content.x = slideLoader.x;
				slideLoader.content.y = slideLoader.y;
				slideLoader.content.width = slideLoader.width;
				slideLoader.content.height = slideLoader.height;
				moveCanvas(slideLoader.x, slideLoader.y);
				zoomCanvas(slideLoader.width, slideLoader.height);
			}
												
			/**
			 * Triggered when the presenter uses the mouse wheel to zoom in/out of the slide.
			 */
			private function onMouseWheelZoomEvent(e:MouseEvent):void {
				var newZoomPercentage:Number = zoomPercentage;
				if (presenterIsZoomingOut(e.delta)) {
					newZoomPercentage -= ZOOM_STEP;
				} else {
					newZoomPercentage += ZOOM_STEP;
				}
				zoomSlide(newZoomPercentage, this.mouseX, this.mouseY);
			}
			
			public function switchToFitToPage(ftp:Boolean):void {
				slideModel.switchToFitToPage(ftp);
				slideModel.onMove(0, 0); // fake a move to reset some values
				onZoomSlide(100);
			}
			
			public function onZoomSlide(zoom:Number):void {
				if (slideLoader.content == null) {
          LOGGER.debug("Not zooming. slideLoader.content == null");
          return;
        }
				zoomSlide(zoom, (((slideLoader.content.width/2)*SlideViewModel.HUNDRED_PERCENT)/zoom), (((slideLoader.content.height/2)*SlideViewModel.HUNDRED_PERCENT)/zoom));
			}
			
			private function zoomSlide(zoom:Number, mouseX:Number, mouseY:Number):void {
				if (zoom <= SlideViewModel.HUNDRED_PERCENT) {
					zoom = SlideViewModel.HUNDRED_PERCENT;
				} else if (zoom >= SlideViewModel.MAX_ZOOM_PERCENT) {
					zoom = SlideViewModel.MAX_ZOOM_PERCENT
				}
				
				if (zoom != zoomPercentage) {
					zoomPercentage = zoom;
					
					slideModel.onZoom(zoomPercentage, mouseX, mouseY);
					slideModel.printViewedRegion();
					slideModel.displayPresenterView();
					fitSlideToLoader();
					notifyOthersOfZoomEvent();
				}
			}
									
			private function notifyOthersOfZoomEvent():void {
				if (this.podId == null) {
					return;
				}

				pagePositionBroadcaster.broadcastPosition(slideModel.viewedRegionX, 
          slideModel.viewedRegionY, 
          slideModel.viewedRegionW, 
          slideModel.viewedRegionH);
			}
			
			private function presenterIsZoomingOut(delta:Number):Boolean {
				// If delta is negative, the presenter is zooming-out of the presentation.
				return delta < 0;
			}

			/**
			 * Handles notification from presenter that the slide has moved.
			 */
			private function handlePageChangedEvent(e:PageChangedEvent):void {
        LOGGER.debug("Got a page changed event for pod=" + e.podId + " page=" + e.pageId);
				if (e.podId != this.podId) {
          LOGGER.debug("Not handling page as this.podId=" + this.podId);
					return;
				}

				LOGGER.debug("Got a page changed event for page [{0}]", [e.pageId]);
				var page:Page = PresentationPodManager.getInstance().getPod(e.podId).getPage(e.pageId);
				if (page != null) {
					if (! amITheCurrentPodPresenter()) {
						// if we are presenter, we don't need to reposition our view of the page
						positionPage(page);
					}
				}
			}

      private function positionPage(page:Page):void {
        LOGGER.debug("Got Positioning page [{0}]", [page.id]);
        if (page != null && page.swfData != null) {   
          LOGGER.debug("Handling Positioning page [{0}]", [page.id]);
          slideModel.saveViewedRegion(page.xOffset, page.yOffset, page.widthRatio, page.heightRatio);
          slideModel.calculateViewportNeededForRegion(page.widthRatio, page.heightRatio);
          slideModel.displayViewerRegion(page.xOffset, page.yOffset, page.widthRatio, page.heightRatio);
          slideModel.calculateViewportXY();
          slideModel.displayPresenterView();
          slideModel.printViewedRegion();
          
          zoomPercentage = (SlideViewModel.HUNDRED_PERCENT / slideModel.viewedRegionW) * SlideViewModel.HUNDRED_PERCENT;
          
          fitSlideToLoader();          
        }        
      }
      
			private function handlePageLoadedEvent(e:PageLoadedEvent):void {
        LOGGER.debug("Got a page loaded event for pod=" + e.podId + " page=" + e.pageId);
				if (e.podId != this.podId) {
          LOGGER.debug("Not handling page as this.podId=" + this.podId);
					return;
				}

				LOGGER.debug("Got a page loaded event for page [{0}]", [e.pageId]);
				var page:Page = PresentationPodManager.getInstance().getPod(e.podId).getPage(e.pageId);
				if (page != null) {
					setSelectedSlide(page.num);
					slideLoader.source = page.swfData;
					LOGGER.debug("Displaying page [{0}]", [e.pageId]);
					//positionPage(page);
					if (whiteboardOverlay != null) {
						whiteboardOverlay.displayWhiteboardById(page.id);
					}

					//slideLoader.accessibilityProperties.description = "Slide text start:  " + e.slideText + "    Slide text end";
					slideLoader.accessibilityDescription = ResourceUtil.getInstance().getString("bbb.presentation.slideloader.starttext") +
							page.txtData + ResourceUtil.getInstance().getString("bbb.presentation.slideloader.endtext");
					slideLoader.accessibilityName = ResourceUtil.getInstance().getString("bbb.presentation.slideloader.starttext") +
							page.txtData + ResourceUtil.getInstance().getString("bbb.presentation.slideloader.endtext");
				}
			}

			private function amITheCurrentPodPresenter(): Boolean {
				return UsersUtil.getMyUserID() == this.currentPresenterInPod;
			}
			
			public function becomeViewer(amIThePresenterInThePod:Boolean, currentPresenterInPod: String):void {

				removeEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				this.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				
				pagePositionBroadcaster.reset();
				
				endDrag();
			}
			
			public function becomePresenter(amIThePresenterInThePod:Boolean, currentPresenterInPod: String):void {
				// need to calculate slide zoom percentage left by a previous presenter
				/**
				  * We use width for the calculation because of fit-to-width mode. If you change between 
				  * presenters rapidly the presentation drifts upwards slightly. - Chad
				  */
				zoomPercentage = (SlideViewModel.HUNDRED_PERCENT / slideModel.viewedRegionW) * SlideViewModel.HUNDRED_PERCENT;

				addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				this.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				notifyOthersOfZoomEvent();
			}

			private function noSlideContentLoaded():Boolean {
				return slideLoader.content == null
			}
						
			/*
			 * Fire an event when a single slide has been loaded.
			 */
			private function listenForSlideLoadedCompleteEvent():void {
				slideLoader.addEventListener(Event.COMPLETE, handleSlideLoadedCompleteEvent);
			}
			
			private function handleSlideLoadedCompleteEvent(event:Event):void {

        		LOGGER.debug("Page has been loaded by swfLoader.");
				slideModel.resetForNewSlide(slideLoader.contentWidth, slideLoader.contentHeight);
				dispatchNewSlideDisplayedEvent(slideModel.pageOrigW, slideModel.pageOrigH);
			}

			private function dispatchNewSlideDisplayedEvent(slideRealWidth:int, slideRealHeight:int):void {
				var dispEvent:DisplaySlideEvent = new DisplaySlideEvent(DisplaySlideEvent.DISPLAY_SLIDE_EVENT);
				dispEvent.slideWidth = slideRealWidth;
				dispEvent.slideHeight = slideRealHeight;
				dispatcher.dispatchEvent(dispEvent);
			}
			
			public function acceptOverlayCanvas(_podId: String, overlay:IWhiteboardOverlay):void{
				if (_podId != this.podId || PresentationPodManager.getInstance().getPod(_podId) == null) {
					return;
				}

				whiteboardOverlay = overlay;

				var currPage:Page = PresentationPodManager.getInstance().getPod(_podId).getCurrentPage();
				if (currPage != null) {
					whiteboardOverlay.displayWhiteboardById(currPage.id);
				}

				this.addChildAt((whiteboardOverlay as DisplayObject), this.getChildIndex(thumbnailView));
				fitSlideToLoader();
				(whiteboardOverlay as IEventDispatcher).addEventListener(MouseEvent.MOUSE_DOWN, handleWhiteboardCanvasClick);
				slideLoader.addEventListener(MouseEvent.MOUSE_DOWN, handleWhiteboardCanvasClick);
			}
			
			public function removeOverlayCanvas():void {
				whiteboardOverlay = null;
			}
			
			private function handleWhiteboardCanvasClick(e:MouseEvent):void {
				if (thumbnailView.visible) thumbnailView.visible = false;
			}
			
			public function moveCanvas(x:Number, y:Number):void{
				if (whiteboardOverlay != null) {
					whiteboardOverlay.moveCanvas(x * SlideCalcUtil.MYSTERY_NUM, y * SlideCalcUtil.MYSTERY_NUM);
				}
			}
			
			public function zoomCanvas(width:Number, height:Number):void{
				moveCanvas(slideLoader.x, slideLoader.y);
				if (whiteboardOverlay != null) {
					//LogUtil.debug("Zooming Canvas " + width + " " + height);
					whiteboardOverlay.zoomCanvas(width, height);
				}
			}
			
			private function focusSlide(e:ShortcutEvent):void{
				focusManager.setFocus(slideLoader);
				slideLoader.drawFocus(true);
			}
			
		]]>
	</fx:Script>
	<fimage:FocusableImage id="slideLoader" width="{slideModel.loaderW}" height="{slideModel.loaderH}"
                           x="{slideModel.loaderX}" y="{slideModel.loaderY}" useHandCursor="true" buttonMode="false"
		                   creationComplete="listenForSlideLoadedCompleteEvent()"
                           styleName="presentationSlideViewStyle"
                           scaleContent="false"
                           showBusyCursor="true"
                           completeEffect="Fade" />
   <mx:HorizontalList id="thumbnailView" itemRenderer="org.bigbluebutton.modules.present.ui.views.Thumbnail" 
    	              visible="false" width="100%" height="100" 
                      bottom="0" change="changeSlide()" />

</mx:Canvas>
