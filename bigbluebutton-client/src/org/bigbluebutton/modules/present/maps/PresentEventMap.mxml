<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<EventMap xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns="http://mate.asfusion.com/">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.modules.present.business.PresentProxy;
			import org.bigbluebutton.modules.present.commands.ChangePageCommand;
			import org.bigbluebutton.modules.present.commands.ChangePresentationCommand;
			import org.bigbluebutton.modules.present.commands.GoToNextPageCommand;
			import org.bigbluebutton.modules.present.commands.GoToPageCommand;
			import org.bigbluebutton.modules.present.commands.GoToPrevPageCommand;
			import org.bigbluebutton.modules.present.commands.UploadFileCommand;
			import org.bigbluebutton.modules.present.events.DownloadEvent;
			import org.bigbluebutton.modules.present.events.ExportEvent;
			import org.bigbluebutton.modules.present.events.GetAllPodsRespEvent;
			import org.bigbluebutton.modules.present.events.GetListOfPresentationsRequest;
			import org.bigbluebutton.modules.present.events.NewPresentationPodCreated;
			import org.bigbluebutton.modules.present.events.PresentModuleEvent;
			import org.bigbluebutton.modules.present.events.PresentationPodRemoved;
			import org.bigbluebutton.modules.present.events.PresentationUploadTokenFail;
			import org.bigbluebutton.modules.present.events.PresentationUploadTokenPass;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import org.bigbluebutton.modules.present.events.RemovePresentationEvent;
			import org.bigbluebutton.modules.present.events.RequestClosePresentationPodEvent;
			import org.bigbluebutton.modules.present.events.RequestNewPresentationPodEvent;
			import org.bigbluebutton.modules.present.events.SetPresentationDownloadableEvent;
			import org.bigbluebutton.modules.present.events.SetPresenterInPodReqEvent;
			import org.bigbluebutton.modules.present.events.UploadEvent;
			import org.bigbluebutton.modules.present.managers.PresentManager;
			import org.bigbluebutton.modules.present.services.PageLoaderService;
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<EventHandlers type="{FlexEvent.PREINITIALIZE}">
			<ObjectBuilder generator="{PresentManager}" cache="global" />
			<ObjectBuilder generator="{PresentProxy}" cache="global" />
		</EventHandlers>
		
		<EventHandlers type="{PresentModuleEvent.START_MODULE}" >
			<MethodInvoker generator="{PresentManager}" method="handleStartModuleEvent" arguments="{event}"/>
			<MethodInvoker generator="{PresentProxy}" method="getPresentationPodsInfo" />
			<MethodInvoker generator="{PresentProxy}" method="connect" arguments="{event}" />
		</EventHandlers>
		
		<EventHandlers type="{PresentModuleEvent.STOP_MODULE}" >
			<MethodInvoker generator="{PresentManager}" method="handleStopModuleEvent" />
		</EventHandlers>
	
		<EventHandlers type="{DownloadEvent.OPEN_DOWNLOAD_WINDOW}" >
			<MethodInvoker generator="{PresentManager}" method="handleOpenDownloadWindow" arguments="{event}"/>
		</EventHandlers>
	
		<EventHandlers type="{DownloadEvent.CLOSE_DOWNLOAD_WINDOW}" >
			<MethodInvoker generator="{PresentManager}" method="handleCloseDownloadWindow" />
		</EventHandlers>
	
		<EventHandlers type="{DownloadEvent.DOWNLOAD_PRESENTATION}" >
			<MethodInvoker generator="{PresentProxy}"  method="startDownload" arguments="{event}" />
		</EventHandlers>
		
		<EventHandlers type="{BBBEvent.RECONNECT_BIGBLUEBUTTON_SUCCEEDED_EVENT}" >
			<MethodInvoker generator="{PresentProxy}" method="getPresentationPodsInfo" />
		</EventHandlers>
		
		<EventHandlers type="{UploadEvent.OPEN_UPLOAD_WINDOW}" >
			<MethodInvoker generator="{PresentManager}" method="handleOpenUploadWindow" arguments="{event}" />
		</EventHandlers>
		
		<EventHandlers type="{UploadEvent.CLOSE_UPLOAD_WINDOW}" >
			<MethodInvoker generator="{PresentManager}" method="handleCloseUploadWindow" />
		</EventHandlers>
		
		<EventHandlers type="{ExportEvent.OPEN_EXPORT_WINDOW}" >
			<MethodInvoker generator="{PresentManager}" method="handleOpenExportWindow" arguments="{event}"/>
		</EventHandlers>
		
		<EventHandlers type="{ExportEvent.CLOSE_EXPORT_WINDOW}" >
			<MethodInvoker generator="{PresentManager}" method="handleCloseExportWindow" />
		</EventHandlers>
			
		<EventHandlers type="{UploadFileCommand.UPLOAD_FILE}">
			<MethodInvoker generator="{PresentProxy}" method="requestUploadToken" arguments="{event}" />
		</EventHandlers>


		<EventHandlers type="{PresentationUploadTokenPass.PRESENTATION_UPLOAD_TOKEN_PASS}">
			<MethodInvoker generator="{PresentProxy}" method="startUpload" arguments="{event}" />
		</EventHandlers>

		<EventHandlers type="{PresentationUploadTokenFail.PRESENTATION_UPLOAD_TOKEN_FAIL}">
			<MethodInvoker generator="{PresentProxy}" method="cancelUpload" arguments="{event}" />
		</EventHandlers>

		<EventHandlers type="{PresenterCommands.GOTO_SLIDE}" >
			<MethodInvoker generator="{PresentProxy}" method="gotoSlide" arguments="{event}" />
		</EventHandlers>
		
		<EventHandlers type="{PresenterCommands.SHARE_PRESENTATION_COMMAND}">
			<MethodInvoker generator="{PresentProxy}" method="sharePresentation" arguments="{event}" />
		</EventHandlers>
		
		<EventHandlers type="{PresenterCommands.ZOOM}" >
			<MethodInvoker generator="{PresentProxy}" method="zoomSlide" arguments="{event}" />
		</EventHandlers>
	
	  <EventHandlers type="{GetListOfPresentationsRequest.GET_LIST_OF_PRESENTATIONS}" >
	    <MethodInvoker generator="{PresentProxy}" method="handleGetListOfPresentationsRequest" arguments="{event}" />
	  </EventHandlers>
		
		<EventHandlers type="{PresenterCommands.RESIZE}" >
			<MethodInvoker generator="{PresentProxy}" method="resizeSlide" arguments="{event}" />
		</EventHandlers>
		
		<EventHandlers type="{ChangePageCommand.CHANGE_PAGE_COMMAND}" >
			<MethodInvoker generator="{PageLoaderService}" method="loadPage" arguments="{event}" />
		</EventHandlers>
		
		<EventHandlers type="{RemovePresentationEvent.REMOVE_PRESENTATION_EVENT}">
			<MethodInvoker generator="{PresentProxy}" method="removePresentation" arguments="{event}" />
		</EventHandlers>
		
		<EventHandlers type="{SetPresentationDownloadableEvent.SET_DOWNLOADABLE}">
			<MethodInvoker generator="{PresentProxy}" method="setPresentationDownloadable" arguments="{event}" />
		</EventHandlers>
		
	  <EventHandlers type="{ChangePresentationCommand.CHANGE_PRESENTATION}">
	    <MethodInvoker generator="{PresentProxy}" method="handleChangePresentationCommand" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{GoToPageCommand.GO_TO_PAGE}">
	    <MethodInvoker generator="{PresentProxy}" method="handleGoToPageCommand" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{GoToPrevPageCommand.GO_TO_PREV_PAGE}">
	    <MethodInvoker generator="{PresentProxy}" method="handleGoToPreviousPageCommand" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{GoToNextPageCommand.GO_TO_NEXT_PAGE}">
	    <MethodInvoker generator="{PresentProxy}" method="handleGoToNextPageCommand" arguments="{event}" />
	  </EventHandlers>

		<EventHandlers type="{NewPresentationPodCreated.PRESENTATION_NEW_POD_CREATED}" >
			<MethodInvoker generator="{PresentManager}" method="handleAddPresentationPod" arguments="{event}" />
		</EventHandlers>

		<EventHandlers type="{RequestNewPresentationPodEvent.REQUEST_NEW_PRES_POD}" >
			<MethodInvoker generator="{PresentProxy}" method="handleRequestNewPresentationPod" arguments="{event}" />
		</EventHandlers>

		<EventHandlers type="{RequestClosePresentationPodEvent.REQUEST_CLOSE_PRES_POD}" >
			<MethodInvoker generator="{PresentProxy}" method="handleRequestClosePresentationPod" arguments="{event}" />
		</EventHandlers>

		<EventHandlers type="{PresentationPodRemoved.PRESENTATION_POD_REMOVED}" >
			<MethodInvoker generator="{PresentManager}" method="handlePresentationPodRemoved" arguments="{event}" />
		</EventHandlers>

		<EventHandlers type="{GetAllPodsRespEvent.GET_ALL_PODS_RESP}" >
			<MethodInvoker generator="{PresentManager}" method="handleGetAllPodsRespEvent" arguments="{event}" />
		</EventHandlers>

		<EventHandlers type="{SetPresenterInPodReqEvent.SET_PRESENTER_IN_POD_REQ}" >
			<MethodInvoker generator="{PresentProxy}" method="handleSetPresenterInPodReqEvent" arguments="{event}" />
		</EventHandlers>

	</fx:Declarations>
</EventMap>
